<?php
/**
 * @file
 * Install/uninstall functions for the Delta blocks module.
 */

/**
 * Implements hook_uninstall().
 */
function ac_portfolio_uninstall() {
   acquia_include('taxonomy');

  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => AC_PORTFOLIO_MN));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);
  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete(AC_PORTFOLIO_MN);
  
  // Delete menu links.
  db_delete('menu_links')
    ->condition('module', AC_PORTFOLIO_MN)
    ->execute();
  menu_cache_clear_all();
  
  // unistall fields,  taxonomy and terms
  //field_delete_field(AC_PORTFOLIO_FIELD);
  //field_delete_instance(AC_PORTFOLIO_FIELD);
  _ac_remove_taxonomy_by_name(AC_PORTFOLIO_TAX_MN);
  
  _ac_portfolio_delete_vars();
}

/**
 * Delete module variables
 */
function _ac_portfolio_delete_vars() {
  variable_del('ac_portfolio_taxonomy_mn');
  variable_del('ac_portfolio_thumb_style');
  variable_del('ac_portfolio_gallery_style');
  variable_del('ac_portfolio_image_frame');
  variable_del('ac_portfolio_image_effect');
}

/**
 * Implements hook_install().
 */
function ac_portfolio_install() {
  _ac_portfolio_create_content_type();
  _ac_portfolio_create_taxonomy();
  _ac_portfolio_set_default_vars();
}


/**
 * Creates the Acquia Portfolio content type.
 */
function _ac_portfolio_create_content_type() {
  $t = get_t();

  // Define the node type.
  $node_example = array(
    'type' => AC_PORTFOLIO_MN,
    'name' => $t('Portfolio'),
    'base' => 'node_content',
    'description' => $t('Acquia Portfolio'),
    'body_label' => $t('Adding media to your website as portfolio items.')
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($node_example);
  node_add_body_field($content_type, $t('Portfolio details'));

  // Save the content type
  node_type_save($content_type);
  // Check if we create content type or update.
  $status = node_type_save($content_type);
  // Replacement rule for the messages.
  $t_args = array('%name' => $content_type->name);
  if ($status == SAVED_UPDATED) { // update case
    drupal_set_message($t('The content type %name has been updated.', $t_args));
  } 
  elseif ($status == SAVED_NEW) { // create case
    drupal_set_message($t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
  }
}

/**
 * Create a taxonomy and attach a field to it.
 */
function _ac_portfolio_create_taxonomy() {
  acquia_include('taxonomy');
  $t = get_t();
  
  $vocab = new stdClass();
  $vocab->name = $t('Portfolio');
  $vocab->machine_name = AC_PORTFOLIO_TAX_MN;
  $vocab->description = $t('This taxonomy is for categorizing your portfolio items.');
  $vocab->heirarchy = 1;
  $vocab->module = 'ac_portfolio';
  $vocab->weight = 1;
  taxonomy_vocabulary_save($vocab);
 
  // Create a taxonomy field and use the taxonomy entity we created earlier
  $field = array(
    'field_name' => AC_PORTFOLIO_FIELD,
    'type' => 'taxonomy_term_reference',
    'label' => $t('Portfolio Categories'),
    'cardinality' => -1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => AC_PORTFOLIO_TAX_MN,
          'parent' => 0
        )
      )
    )
  );
  field_create_field($field);
 
  // Add the field to the content type as a HTML select box.
  $instance = array(
    'field_name' => AC_PORTFOLIO_FIELD,
    'entity_type' => 'node',
    'bundle' => AC_PORTFOLIO_MN,
    'label' => $t('Portfolio Categories'),
    'description' => '',
    'required' => TRUE,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_buttons',
      'weight' => -10,
    ),
  );
  field_create_instance($instance);
  
  $vid = _ac_get_taxonomy_vid_by_name(AC_PORTFOLIO_TAX_MN);
  // create dummy categories
  $terms = array('Interface Design', 'Logo Design', ' Photography', 'Visualisations', 'Illustration', 'Brand Identity');
  foreach ($terms as $name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    taxonomy_term_save($term);
  }
}


/**
 * _ac_portfolio_set_default_vars.
 */
function _ac_portfolio_set_default_vars() {
  $t = get_t();

  $default = variable_get('vud_node_types', array());
  variable_set('vud_node_types', array_merge($default, array(AC_PORTFOLIO_MN => AC_PORTFOLIO_MN)));
  variable_set('likebtn_view_modes', array('full' => 'full', 'teaser' => 'teaser'));
  variable_set('likebtn_settings_unlike_allowed', TRUE);
  variable_set('ac_portfolio_thumb_style', 'rectangle-medium');
  variable_set('ac_portfolio_gallery_style', 'square-medium');
  variable_set('ac_portfolio_slideshow_style', 'default-image');
}


/**
 * Implements hook_enable().
 *
 * Enabling Like flag for portfolio nodes
 */
function ac_portfolio_enable() {
  // Load the flag API in case we want to use it when enabling.
  include_once(drupal_get_path('module', 'flag') . '/flag.module');

  if (!flag_get_flags()) {
    $flag = flag_flag::factory_by_entity_type('node');
    $configuration = ac_portfolio_flag_default_flags();
    $flag->form_input($configuration[AC_PORTFOLIO_LIKE_FLAG_MN]);
    $flag->save();

    // Clear the flag cache so the new permission is seen by core.
    drupal_static_reset('flag_get_flags');

    // Grant permissions.
    $permissions = array('flag '.AC_PORTFOLIO_LIKE_FLAG_MN, 'unflag '.AC_PORTFOLIO_LIKE_FLAG_MN);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $permissions);
  }
}